// ==UserScript==
// @name         Leia-me Auto Cheat (Autom√°tico)
// @namespace    http://tampermonkey.net/
// @version      5.0
// @description  Responde perguntas e avan√ßa automaticamente no Leia-me/Odilo com IA
// @author       MZ
// @match        *://*odilo*
// @match        *://*leia-me*
// @grant        GM_notification
// @run-at       document-idle
// ==/UserScript==

(function() {
    'use strict';
    
    // ================= CONFIGURA√á√ïES =================
    const API_KEY = 'SUA_CHAVE_AQUI'; // Sua API Key do Gemini
    const USE_OLLAMA = false; // true para usar Ollama localmente
    const OLLAMA_URL = 'http://localhost:11434/api/generate';
    const OLLAMA_MODEL = 'llama3.2'; // ou 'mistral', 'gemma', etc.
    const READING_TIME_MIN = 40000; // Tempo m√≠nimo de leitura (ms)
    const READING_TIME_MAX = 60000; // Tempo m√°ximo de leitura (ms)
    
    let autoMode = false;
    let processando = false;
    
    if (window.top !== window.self) return;
    
    // ================= INTERFACE DO USU√ÅRIO =================
    const style = document.createElement("style");
    style.textContent = `
        .gemini-box {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #1e1e2f;
            color: #fff;
            font-family: 'Segoe UI', sans-serif;
            padding: 15px 20px;
            border-radius: 16px;
            box-shadow: 0 8px 20px rgba(0,0,0,0.4);
            z-index: 99999;
            display: flex;
            flex-direction: column;
            gap: 8px;
            width: 240px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.1);
        }
        .gemini-box h1 {
            font-size: 16px;
            margin: 0;
            font-weight: 600;
            text-align: center;
            color: #4cc9f0;
        }
        .gemini-box h2 {
            font-size: 14px;
            margin: 0;
            font-weight: 500;
            text-align: center;
            color: #a5b4fc;
        }
        .gemini-box button {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 10px;
            font-size: 14px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .gemini-box button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        .gemini-box .auto-on { 
            background: #10b981 !important; 
        }
        .gemini-box .auto-off { 
            background: #ef4444 !important; 
        }
        .gemini-box #status {
            font-size:13px; 
            color:#ccc; 
            text-align:center; 
            margin-top:6px; 
            min-height: 20px;
        }
        .gemini-box .api-selector {
            display: flex;
            gap: 5px;
            margin: 5px 0;
        }
        .gemini-box .api-selector button {
            flex: 1;
            font-size: 12px;
            padding: 5px;
        }
    `;
    document.head.appendChild(style);
    
    const ui = document.createElement("div");
    ui.className = "gemini-box";
    ui.innerHTML = `
        üìò Leia-me Cheat
        ü¶á by @mzzvxm
        
            Gemini
            Ollama
        
        ‚öôÔ∏è Auto: OFF
        Aguardando
    `;
    document.body.appendChild(ui);
    
    const btnToggle = document.getElementById("toggleAuto");
    const statusDiv = document.getElementById("status");
    const btnUseGemini = document.getElementById("useGemini");
    const btnUseOllama = document.getElementById("useOllama");
    
    let useOllamaMode = USE_OLLAMA;
    updateApiButtons();
    
    btnUseGemini.onclick = function() {
        useOllamaMode = false;
        updateApiButtons();
        statusDiv.textContent = "Usando Gemini API";
    };
    
    btnUseOllama.onclick = function() {
        useOllamaMode = true;
        updateApiButtons();
        statusDiv.textContent = "Usando Ollama Local";
    };
    
    function updateApiButtons() {
        if (useOllamaMode) {
            btnUseGemini.classList.remove("auto-on");
            btnUseGemini.classList.add("auto-off");
            btnUseOllama.classList.remove("auto-off");
            btnUseOllama.classList.add("auto-on");
        } else {
            btnUseGemini.classList.remove("auto-off");
            btnUseGemini.classList.add("auto-on");
            btnUseOllama.classList.remove("auto-on");
            btnUseOllama.classList.add("auto-off");
        }
    }
    
    btnToggle.onclick = function() {
        autoMode = !autoMode;
        this.textContent = `‚öôÔ∏è Auto: ${autoMode ? 'ON' : 'OFF'}`;
        this.classList.toggle("auto-on", autoMode);
        this.classList.toggle("auto-off", !autoMode);
        if (autoMode) {
            statusDiv.textContent = "Modo autom√°tico ativado";
            iniciarLeituraAutomatica();
        } else {
            statusDiv.textContent = "Modo autom√°tico desativado";
        }
    };
    
    // ================= FUN√á√ïES PRINCIPAIS =================
    
    function temPerguntaAtiva() {
        return !!document.querySelector('.question-quiz-text.ng-binding');
    }
    
    function selecionarResposta(letra) {
        const mapa = { A: 0, B: 1, C: 2, D: 3, E: 4 };
        const index = mapa[letra.toUpperCase()];
        if (index === undefined) return false;
    
        const radios = document.querySelectorAll('md-radio-button.choice-radio-button');
        const opcoesTexto = document.querySelectorAll('.choice-student.choice-new-styles__answer');
    
        if (radios[index]) radios[index].click();
        if (opcoesTexto[index]) opcoesTexto[index].click();
    
        return !!(radios[index] || opcoesTexto[index]);
    }
    
    function clicarBotaoQuiz() {
        return new Promise((resolve, reject) => {
            const tentarClique = () => {
                const container = document.querySelector('md-dialog-actions.quiz-dialog-buttons');
                if (!container) return false;
    
                const btnTerminar = container.querySelector('button[ng-click="finish()"]');
                if (btnTerminar && btnTerminar.offsetParent !== null && !btnTerminar.disabled) {
                    console.log("‚úÖ Bot√£o Terminar encontrado. Clicando...");
                    btnTerminar.click();
    
                    const obsEnviar = new MutationObserver((mutations, obs) => {
                        const btnEnviar = container.querySelector('button[ng-click="sendAnswer()"]');
                        if (btnEnviar && btnEnviar.offsetParent !== null && !btnEnviar.disabled) {
                            console.log("‚úÖ Bot√£o Enviar apareceu. Clicando...");
                            btnEnviar.click();
                            obs.disconnect();
    
                            setTimeout(() => {
                                esperarEClicarFechar();
                                resolve(true);
                            }, 500);
                        }
                    });
    
                    obsEnviar.observe(container, { childList: true, subtree: true });
    
                    setTimeout(() => {
                        obsEnviar.disconnect();
                        reject("‚ùå Bot√£o Enviar n√£o apareceu a tempo.");
                    }, 5000);
    
                    return true;
                }
    
                const btnProximo = container.querySelector('button[ng-click="next()"]');
                if (btnProximo && btnProximo.offsetParent !== null && !btnProximo.disabled) {
                    console.log("‚úÖ Bot√£o Pr√≥ximo encontrado. Clicando...");
                    btnProximo.click();
                    resolve(true);
                    return true;
                }
    
                return false;
            };
    
            if (tentarClique()) return;
    
            const obsInit = new MutationObserver((mutations, obs) => {
                const container = document.querySelector('md-dialog-actions.quiz-dialog-buttons');
                if (container) {
                    obs.disconnect();
                    clicarBotaoQuiz().then(resolve).catch(reject);
                }
            });
            obsInit.observe(document.body, { childList: true, subtree: true });
    
            setTimeout(() => {
                obsInit.disconnect();
                reject("‚ùå Container de bot√µes n√£o apareceu.");
            }, 5000);
        });
    }
    
    async function avancarPergunta() {
        try {
            const clicou = await clicarBotaoQuiz();
            return clicou;
        } catch (e) {
            console.warn("Erro ao tentar clicar no bot√£o Terminar ou Pr√≥ximo:", e);
            return false;
        }
    }
    
    async function avancarPaginaLivro() {
        const esperarBotao = () =>
            new Promise(resolve => {
                const tentar = () => {
                    const btn = document.querySelector('button#right-page-btn');
                    if (btn && !btn.disabled) {
                        btn.click();
                        statusDiv.textContent = "P√°gina avan√ßada";
                        resolve(true);
                    } else {
                        setTimeout(tentar, 1000);
                    }
                };
                tentar();
            });
    
        const btn = document.querySelector('button#right-page-btn');
        if (btn && !btn.disabled) {
            btn.click();
            statusDiv.textContent = "Avan√ßou p√°gina";
            return true;
        } else {
            statusDiv.textContent = "Esperando bot√£o de pr√≥xima p√°gina...";
            await esperarBotao();
            return true;
        }
    }
    
    async function chamarGemini(pergunta, alternativas) {
        const prompt = `
Responda a seguinte pergunta do tipo m√∫ltipla escolha. Retorne apenas a letra correta.

Pergunta: ${pergunta}

Alternativas:
${alternativas.map((alt, i) => `${String.fromCharCode(65 + i)}) ${alt}`).join("\n")}
        `.trim();
    
        try {
            const response = await fetch(
                `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`,
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        contents: [{ parts: [{ text: prompt }] }]
                    })
                }
            );
    
            const data = await response.json();
            const texto = data?.candidates?.[0]?.content?.parts?.[0]?.text || "";
            const letra = texto.match(/[A-E]/i)?.[0]?.toUpperCase();
    
            console.log("üí¨ Resposta Gemini (raw):", texto);
            console.log("‚úÖ Letra extra√≠da:", letra);
    
            return letra || null;
    
        } catch (error) {
            console.error("Erro na chamada Gemini:", error);
            statusDiv.textContent = "Erro na API Gemini";
            return null;
        }
    }
    
    async function chamarOllama(pergunta, alternativas) {
        const prompt = `
Responda APENAS com a letra correspondente √† alternativa correta (A, B, C, D ou E).

Pergunta: ${pergunta}

Alternativas:
${alternativas.map((alt, i) => `${String.fromCharCode(65 + i)}) ${alt}`).join("\n")}
        `.trim();
    
        try {
            const response = await fetch(OLLAMA_URL, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    model: OLLAMA_MODEL,
                    prompt: prompt,
                    stream: false
                })
            });
    
            const data = await response.json();
            const texto = data?.response || "";
            const letra = texto.match(/[A-E]/i)?.[0]?.toUpperCase();
    
            console.log("üí¨ Resposta Ollama (raw):", texto);
            console.log("‚úÖ Letra extra√≠da:", letra);
    
            return letra || null;
    
        } catch (error) {
            console.error("Erro na chamada Ollama:", error);
            statusDiv.textContent = "Erro no Ollama - Verifique se est√° rodando";
            return null;
        }
    }
    
    async function processarPergunta() {
        if (processando) return;
        processando = true;
    
        try {
            const perguntaEl = document.querySelector('.question-quiz-text.ng-binding');
            if (!perguntaEl) {
                statusDiv.textContent = "Nenhuma pergunta ativa";
                processando = false;
                return;
            }
    
            const pergunta = perguntaEl.innerText.trim();
            const opcoes = [...document.querySelectorAll('.choice-student.choice-new-styles__answer')]
                .map(el => el.innerText.trim())
                .filter(text => text.length > 0);
    
            if (!pergunta || opcoes.length === 0) {
                statusDiv.textContent = "Pergunta ou op√ß√µes vazias";
                processando = false;
                return;
            }
    
            statusDiv.textContent = "Pergunta detectada. Processando...";
            console.log("üìò Pergunta:", pergunta);
            console.log("üî¢ Op√ß√µes:", opcoes);
    
            const letra = useOllamaMode ? 
                await chamarOllama(pergunta, opcoes) : 
                await chamarGemini(pergunta, opcoes);
    
            if (letra) {
                statusDiv.textContent = `Resposta: ${letra}. Selecionando...`;
                console.log("‚úÖ Resposta:", letra);
    
                if (selecionarResposta(letra)) {
                    statusDiv.textContent = "Resposta marcada. Avan√ßando...";
                    console.log("üëç Resposta marcada");
                    await new Promise(r => setTimeout(r, 1500));
                    await avancarPergunta();
                    await new Promise(r => setTimeout(r, 3000));
                } else {
                    statusDiv.textContent = "Letra reconhecida, mas n√£o clic√°vel";
                    console.warn("‚ùå Letra reconhecida mas n√£o clic√°vel:", letra);
                }
            } else {
                statusDiv.textContent = "Resposta n√£o obtida";
                console.warn("‚ö†Ô∏è N√£o foi poss√≠vel identificar a resposta da IA");
            }
        } finally {
            processando = false;
        }
    }
    
    async function iniciarLeituraAutomatica() {
        statusDiv.textContent = "Iniciando modo autom√°tico...";
        while (autoMode) {
            if (temPerguntaAtiva()) {
                await processarPergunta();
            } else {
                await avancarPaginaLivro();
                const tempoLeitura = Math.floor(Math.random() * (READING_TIME_MAX - READING_TIME_MIN + 1)) + READING_TIME_MIN;
                statusDiv.textContent = `Lendo p√°gina (${Math.round(tempoLeitura/1000)}s)`;
                await new Promise(r => setTimeout(r, tempoLeitura));
            }
            await new Promise(r => setTimeout(r, 1000));
        }
        statusDiv.textContent = "Modo autom√°tico desativado";
    }
    
    function esperarEClicarFechar() {
        const tentarCliqueFechar = () => {
            const btnFechar = document.querySelector('md-toolbar button.md-icon-button[ng-click="close()"]');
            if (btnFechar && btnFechar.offsetParent !== null && !btnFechar.disabled) {
                console.log("‚úÖ Bot√£o Fechar (md-toolbar) encontrado. Clicando...");
                btnFechar.click();
                return true;
            }
            return false;
        };
    
        if (tentarCliqueFechar()) return;
    
        const obsFechar = new MutationObserver(() => {
            if (tentarCliqueFechar()) {
                obsFechar.disconnect();
            }
        });
    
        obsFechar.observe(document.body, { childList: true, subtree: true });
    
        setTimeout(() => obsFechar.disconnect(), 5000);
    }
    
    console.log("‚úÖ Leia-me Auto Cheat carregado! Use a interface no canto inferior direito.");
})();
